<?xml version="1.0" encoding="utf-8"?>
<!-- _lcid="1033" _version="14.0.4750.1000" _dal="1" -->
<!-- _LocalBinding -->
<root>
  <!-- 
    Microsoft ResX Schema
    Version 2.0
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    Example:
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    mimetype: application/x-microsoft.net.object.binary.base64
    value    : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    mimetype: application/x-microsoft.net.object.soap.base64
    value    : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.
    mimetype: application/x-microsoft.net.object.bytearray.base64
    value    : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <!-- layouts.sitemap.xlsrv.xml -->
  <data name="ExcelServicesAdmin_SiteMap_PageTitle">
    <value>Excel Services Application</value>
  </data>
  <data name="ExcelServerSettings_SiteMap_PageTitle">
    <value>Settings</value>
  </data>
  <data name="ExcelServerTrustedLocations_SiteMap_PageTitle">
    <value>Trusted File Locations</value>
  </data>
  <data name="ExcelServerTrustedLocation_SiteMap_PageTitle">
    <value>Trusted File Location</value>
  </data>
  <data name="ExcelServerTrustedDcls_SiteMap_PageTitle">
    <value>Trusted Data Connection Libraries</value>
  </data>
  <data name="ExcelServerTrustedDcl_SiteMap_PageTitle">
    <value>Trusted Data Connection Library</value>
  </data>
  <data name="ExcelServerSafeDataProviders_SiteMap_PageTitle">
    <value>Trusted Data Providers</value>
  </data>
  <data name="ExcelServerSafeDataProvider_SiteMap_PageTitle">
    <value>Trusted Data Provider</value>
  </data>
  <data name="ExcelServerUserDefinedFunctions_SiteMap_PageTitle">
    <value>User-Defined Functions</value>
  </data>
  <data name="ExcelServerUserDefinedFunction_SiteMap_PageTitle">
    <value>User-Defined Function Assembly</value>
  </data>
  <!-- ExcelServer\Feature.xml -->
  <data name="Feature-title">
    <value>Excel Services Application View Farm Feature</value>
  </data>
  <data name="Feature-description">
    <value>Adds farm-level Excel Services Application viewing features to the Microsoft SharePoint Foundation framework</value>
  </data>
  <!-- ExcelServerSite\Feature.xml -->
  <data name="FeatureSite-title">
    <value>Excel Services Application View Site Feature</value>
  </data>
  <data name="FeatureSite-description">
    <value>Adds site-level Excel Services Application viewing features to the Microsoft SharePoint Foundation framework</value>
  </data>
  <!-- ExcelServerEdit\Feature.xml -->
  <data name="FeatureEdit-title">
    <value>Excel Services Application Edit Site Feature</value>
  </data>
  <data name="FeatureEdit-description">
    <value>Adds site-level Excel Services Application editing features to the Microsoft SharePoint Foundation framework</value>
  </data>
  <!-- ExcelServerEditStapler\Feature.xml -->
  <data name="FeatureEditStapler-title">
    <value>Excel Services Application Edit Farm Feature</value>
  </data>
  <data name="FeatureEditStapler-description">
    <value>Adds farm-level Excel Services Application editing features to the Microsoft SharePoint Foundation framework</value>
  </data>
  <!-- ExcelServerWebPart\Feature.xml -->
  <data name="FeatureWebPart-title">
    <value>Excel Services Application Web Part Site Feature</value>
  </data>
  <data name="FeatureWebPart-description">
    <value>Adds site-level Excel Services Application web part features to the Microsoft SharePoint Foundation framework</value>
  </data>
  <!-- ExcelServerWebPartStapler\Feature.xml -->
  <data name="FeatureWebPartStapler-title">
    <value>Excel Services Application Web Part Farm Feature</value>
  </data>
  <data name="FeatureWebPartStapler-description">
    <value>Adds farm-level Excel Services Application web part features to the Microsoft SharePoint Foundation framework</value>
  </data>
  <!-- MobileEwa\Feature.xml -->
  <data name="FeatureSiteMobileEwa-title">
    <value>Excel Mobile Viewer Feature</value>
  </data>
  <data name="FeatureSiteMobileEwa-description">
    <value>Adds site-level Excel Mobile Viewer Feature to the Microsoft SharePoint Foundation framework</value>
  </data>
  <data name="FeatureFarmMobileEwa-title">
    <value>Excel Mobile Viewer Feature</value>
  </data>
  <data name="FeatureFarmMobileEwa-description">
    <value>Adds farm-level Excel Mobile Viewer Feature to the Microsoft SharePoint Foundation framework</value>
  </data>
  <!-- ExcelServerDeactivateProgrammability\Feature.xml -->
  <data name="FeatureDeactivateProgrammability-title">
    <value>Excel Services Application Deactivate Site Programmability Feature</value>
  </data>
  <data name="FeatureDeactivateProgrammability-description">
    <value>Deactivates site-level Excel Services Application programmability</value>
  </data>
  <!-- Microsoft.Office.Excel.WebUI.dwp -->
  <data name="dwp-title">
    <value>Excel Web Access</value>
  </data>
  <data name="dwp-description">
    <value>Use the Excel Web Access Web Part to interact with an Excel workbook as a Web page.</value>
  </data>
  <!-- ViewAsHtml.xml -->
  <data name="ewrViewAsHtmlFromForm-title">
    <value>View</value>
  </data>
  <data name="ewrViewAsHtmlFromForm-description">
    <value>View this document as HTML using Excel in the browser</value>
  </data>
  <data name="ewrViewAsHtmlFromEcb-title">
    <value>View in Browser</value>
  </data>
  <data name="ewrViewAsHtmlFromEcb-description">
    <value>View this document as HTML using Excel in the browser</value>
  </data>
  <!-- EditAsHtml.xml -->
  <data name="ewrEditAsHtmlFromEcb-title">
    <value>Edit in Browser</value>
  </data>
  <data name="ewrEditAsHtmlFromEcb-description">
    <value>Edit this document as HTML using Excel in the browser</value>
  </data>
  <!-- Create App Dialog -->
  <data name="ManagementUI_ServiceAppDialogTitle">
    <value>Create New Excel Services Application</value>
  </data>
  <data name="ManagementUI_ServiceAppPageCaption">
    <value>Specify the name, application pool, and default for this Application.</value>
  </data>
  <data name="ManagementUI_ServiceAppNameLabel">
    <value>Name</value>
  </data>
  <data name="ManagementUI_DefaultLabel">
    <value>Add to default proxy list</value>
  </data>
  <data name="ManagementUI_DefaultDescription">
    <value>The setting makes this service application available for use by default for web applications in this farm. Do not check this setting if you wish to specify manually which web applications should use this service application.</value>
  </data>
  <data name="ManagementUI_DefaultCheckboxDescription">
    <value>Add this service application's proxy to the farm's default proxy list.</value>
  </data>
  <data name="ManagementUI_ServiceAppNextMessage">
    <value>Click Next to continue creating a new Excel Services Application</value>
  </data>
  <data name="ManagementUI_NextButton">
    <value>Next</value>
  </data>
  <data name="ManagementUI_AppCreatedMessage">
    <value>Excel Services Application successfully created.</value>
  </data>
  <data name="ManagementUI_RequiredFieldErrorMessage">
    <value>Required</value>
  </data>
  <data name="ManagementUI_DuplicateNameErrorMessage">
    <value>This name is already being used but another Excel Services Application in this farm. Try again using another name.</value>
  </data>
</root>